// Pipeline for downloading and storing airport data
pipeline AirportsPipeline {

  // Define the source of the data: a CSV file from the web
  
     AirportsExtractor
    -> AirportsTextFileInterpreter;

    AirportsTextFileInterpreter
    ->AirportssCSVInterpreter
    ->AirportsTableInterpreter
    ->AirportsLoader;

 
  

  block AirportsExtractor oftype HttpExtractor {

    // 8. Properties are assigned to concrete values.
    // Here, we specify the URL where the file shall be downloaded from.
    url: 'https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B';
  }
 block AirportsTextFileInterpreter oftype TextFileInterpreter { }

  block AirportssCSVInterpreter oftype CSVInterpreter {
    delimiter: ";";
  }
//    block AirportsCoreDataSelector oftype CellRangeSelector {
//    select: range A1:E*;
//  }

   block AirportsTableInterpreter oftype TableInterpreter {
   header: true;
   columns: [
     "Lfd. Nummer" oftype integer,
     "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype integer,
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
      "Altitude" oftype integer,
   ];
 }
  // 10. Next, we interpret the text file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
  block AirportsLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }
}
